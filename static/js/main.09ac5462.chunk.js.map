{"version":3,"sources":["Utils/index.ts","store/game/actions.ts","store/game/types.ts","components/Configurator/index.tsx","components/GameField/index.tsx","components/ControlPanel/index.tsx","components/App/index.tsx","serviceWorker.ts","store/game/reducers.ts","store/index.ts","index.tsx"],"names":["makeFieldMatrix","x","y","color","fieldMatrix","iX","firstLevelArray","iY","push","getRandomInt","max","Math","floor","random","setTempFieldMatrix","newFieldMatrix","dispatch","type","tempFieldMatrix","setPlayer","player","dice","currentFigure","currentPlayer","Configurator","useDispatch","useState","setX","setY","players","setPlayers","className","min","value","onChange","e","Number","map","item","i","key","index","newPlayers","playersHandler","target","danger","disabled","length","onClick","filter","block","config","name","count","GameField","fieldMatrixRef","useRef","useSelector","state","game","cellSide","currentFigureX","currentFigureY","geometry","setGeometry","useEffect","current","getBoundingClientRect","isInsideGameField","mouseOverCellX","left","mouseOverCellY","top","rectangleCoordinates","setRectangleCells","isOverEdge","isFM","isFirstMove","isInCorner","isInsertByRules","fillFieldMatrix","autofilling","ref","style","backgroundColor","insideX","right","insideY","bottom","rectCoord","xStart","yStart","xEnd","yEnd","round","field","figure","siblingCells","reduce","acc","itemY","arr","itemX","indexY","indexX","slice","boolArr","fillTrue","forEach","gameField","checkSiblings","isInsideField","siblingCellsArr","Cell","currentContent","undefined","this","ControlPanel","newFigureRef","dices","stepDone","setStepDone","rollDiceDone","setRollDiceDone","mouseMoveHandler","useCallback","pageX","offsetWidth","pageY","offsetHeight","playerColor","firstDice","secondDice","rotateFigure","playerIndex","findIndex","nextPlayer","onMouseDown","position","document","addEventListener","onMouseUp","removeEventListener","isDifferent","join","flat","Object","assign","App","Boolean","window","location","hostname","match","initialState","middlewares","thunkMiddleware","store","createStore","combineReducers","action","applyMiddleware","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.09ac5462.chunk.js","sourcesContent":["import { Dice, PlayerColor, GameArray } from '../store/game/types';\r\n\r\nexport function makeFieldMatrix(x: number, y: number, color?: PlayerColor): GameArray {\r\n  const fieldMatrix: GameArray = [];\r\n  for (let iX = 0; iX < x; iX++) {\r\n    const firstLevelArray: Array<PlayerColor | null> = [];\r\n    for (let iY = 0; iY < y; iY++) firstLevelArray.push(color || null);\r\n    fieldMatrix.push(firstLevelArray);\r\n  }\r\n  return fieldMatrix;\r\n}\r\n\r\nexport function getRandomInt(max: number = 6): Dice {\r\n  return (Math.floor(Math.random() * max) + 1) as Dice;\r\n}\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  ROLL_THE_DICE,\r\n  GameActionTypes,\r\n  Dice,\r\n  ROTATE_FIGURE,\r\n  Dices,\r\n  iConfig,\r\n  SET_CONFIG,\r\n  iPlayer,\r\n  PlayerColor,\r\n  SET_FIGURE_POSITION,\r\n  SET_FIELD_MATRIX,\r\n  SET_FINAL_FIGURE_POSITION,\r\n  SET_TEMP_FIELD_MATRIX,\r\n  SET_PLAYER,\r\n  GameArray,\r\n} from './types';\r\nimport { getRandomInt, makeFieldMatrix } from '../../Utils';\r\n\r\nexport function rollTheDice(playerColor?: PlayerColor) {\r\n  return function (dispatch: Dispatch<GameActionTypes>) {\r\n    const firstDice: Dice = getRandomInt();\r\n    const secondDice: Dice = getRandomInt();\r\n    dispatch({\r\n      type: ROLL_THE_DICE,\r\n      dice: [firstDice, secondDice],\r\n      currentFigure: makeFieldMatrix(firstDice, secondDice, playerColor),\r\n    });\r\n  };\r\n}\r\n\r\nexport function rotateFigure(dices: Dices, playerColor?: PlayerColor) {\r\n  return function (dispatch: Dispatch<GameActionTypes>) {\r\n    const firstDice = dices[1];\r\n    const secondDice = dices[0];\r\n    dispatch({\r\n      type: ROTATE_FIGURE,\r\n      dice: [firstDice, secondDice],\r\n      currentFigure: makeFieldMatrix(firstDice, secondDice, playerColor),\r\n    });\r\n  };\r\n}\r\n\r\nexport function setConfig(config: iConfig) {\r\n  return function (dispatch: Dispatch<GameActionTypes>) {\r\n    const players: Array<iPlayer> = config.players.map(\r\n      (item, index) => ({ name: item, color: ['Red', 'Green', 'Yellow', 'Blue'][index], count: 0 } as iPlayer)\r\n    );\r\n    const currentPlayer = players[getRandomInt(players.length) - 1];\r\n    dispatch({\r\n      type: SET_CONFIG,\r\n      config: config,\r\n      fieldMatrix: makeFieldMatrix(config.x, config.y),\r\n      tempFieldMatrix: makeFieldMatrix(config.x, config.y),\r\n      players: players,\r\n      currentPlayer: currentPlayer,\r\n    });\r\n  };\r\n}\r\n\r\nexport function setFigurePosition(x: number, y: number) {\r\n  return function (dispatch: Dispatch<GameActionTypes>) {\r\n    dispatch({\r\n      type: SET_FIGURE_POSITION,\r\n      currentFigureX: x,\r\n      currentFigureY: y,\r\n    });\r\n  };\r\n}\r\n\r\nexport function setFieldMatrix(newFieldMatrix: GameArray) {\r\n  return function (dispatch: Dispatch<GameActionTypes>) {\r\n    dispatch({\r\n      type: SET_FIELD_MATRIX,\r\n      fieldMatrix: newFieldMatrix,\r\n    });\r\n  };\r\n}\r\n\r\nexport function setTempFieldMatrix(newFieldMatrix: GameArray) {\r\n  return function (dispatch: Dispatch<GameActionTypes>) {\r\n    dispatch({\r\n      type: SET_TEMP_FIELD_MATRIX,\r\n      tempFieldMatrix: newFieldMatrix,\r\n    });\r\n  };\r\n}\r\n\r\nexport function setFinalFigurePosition(newFieldMatrix: GameArray) {\r\n  return function (dispatch: Dispatch<GameActionTypes>) {\r\n    dispatch({\r\n      type: SET_FINAL_FIGURE_POSITION,\r\n      tempFieldMatrix: newFieldMatrix,\r\n    });\r\n  };\r\n}\r\n\r\nexport function setPlayer(player: iPlayer) {\r\n  return function (dispatch: Dispatch<GameActionTypes>) {\r\n    dispatch({\r\n      type: SET_PLAYER,\r\n      dice: null,\r\n      currentFigure: null,\r\n      currentPlayer: player,\r\n    });\r\n  };\r\n}\r\n","export const ROLL_THE_DICE = 'ROLL_THE_DICE';\r\nexport const ROTATE_FIGURE = 'ROTATE_FIGURE';\r\nexport const SET_CONFIG = 'SET_CONFIG';\r\nexport const SET_FIGURE_POSITION = 'SET_FIGURE_POSITION';\r\nexport const SET_FIELD_MATRIX = 'SET_FIELD_MATRIX';\r\nexport const SET_TEMP_FIELD_MATRIX = 'SET_TEMP_FIELD_MATRIX';\r\nexport const SET_FINAL_FIGURE_POSITION = 'SET_FINAL_FIGURE_POSITION';\r\nexport const SET_PLAYER = 'SET_PLAYER';\r\n\r\nexport interface GameState {\r\n  config: iConfig | null;\r\n  cellSide: number;\r\n  fieldMatrix: GameArray | null;\r\n  tempFieldMatrix: GameArray | null;\r\n  dice: Dices | null;\r\n  currentFigure: GameArray | null;\r\n  currentFigureX: number;\r\n  currentFigureY: number;\r\n  players: Array<iPlayer> | null;\r\n  currentPlayer: iPlayer | null;\r\n}\r\n\r\nexport interface iConfig {\r\n  x: number;\r\n  y: number;\r\n  players: Array<string>;\r\n}\r\nexport interface iPlayer {\r\n  name: string;\r\n  color: PlayerColor;\r\n  count: number;\r\n}\r\nexport type GameArray = Array<Array<PlayerColor | null>>;\r\nexport type PlayerColor = 'Red' | 'Green' | 'Yellow' | 'Blue';\r\nexport type Dices = [Dice, Dice];\r\nexport type Dice = 1 | 2 | 3 | 4 | 5 | 6;\r\n\r\ninterface RollTheDice {\r\n  type: typeof ROLL_THE_DICE;\r\n  dice: Dices;\r\n  currentFigure: GameArray;\r\n}\r\n\r\ninterface RotateFigure {\r\n  type: typeof ROTATE_FIGURE;\r\n  dice: Dices;\r\n  currentFigure: GameArray;\r\n}\r\n\r\ninterface SetConfig {\r\n  type: typeof SET_CONFIG;\r\n  config: iConfig;\r\n  fieldMatrix: GameArray;\r\n  tempFieldMatrix: GameArray;\r\n  players: Array<iPlayer> | null;\r\n  currentPlayer: iPlayer;\r\n}\r\n\r\ninterface SetFigurePosition {\r\n  type: typeof SET_FIGURE_POSITION;\r\n  currentFigureX: number;\r\n  currentFigureY: number;\r\n}\r\n\r\ninterface SetFinalFigurePosition {\r\n  type: typeof SET_FINAL_FIGURE_POSITION;\r\n  tempFieldMatrix: GameArray | null;\r\n}\r\n\r\ninterface SetFieldMatrix {\r\n  type: typeof SET_FIELD_MATRIX;\r\n  fieldMatrix: GameArray | null;\r\n}\r\n\r\ninterface SetTempFieldMatrix {\r\n  type: typeof SET_TEMP_FIELD_MATRIX;\r\n  tempFieldMatrix: GameArray | null;\r\n}\r\n\r\ninterface SetPlayer {\r\n  type: typeof SET_PLAYER;\r\n  currentPlayer: iPlayer | null;\r\n}\r\n\r\nexport type GameActionTypes =\r\n  | RollTheDice\r\n  | RotateFigure\r\n  | SetConfig\r\n  | SetFigurePosition\r\n  | SetFieldMatrix\r\n  | SetFinalFigurePosition\r\n  | SetTempFieldMatrix\r\n  | SetPlayer;\r\n","import React, { useState } from 'react';\r\nimport './Configurator.css';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setConfig } from '../../store/game/actions';\r\nimport { Button, Input, InputNumber } from 'antd';\r\n\r\nfunction Configurator() {\r\n  const dispatch = useDispatch();\r\n  const [x, setX] = useState(20);\r\n  const [y, setY] = useState(20);\r\n  const [players, setPlayers] = useState(['player1', 'player2']);\r\n  const playersHandler = (value: string, index: number) => {\r\n    const newPlayers = players.map((item, i) => {\r\n      if (i === index) return value;\r\n      else return item;\r\n    });\r\n    setPlayers(newPlayers);\r\n  };\r\n  const submit = () => {\r\n    if (x < 20 || y < 20 || x > 45 || y > 45) return;\r\n    dispatch(setConfig({ players, x, y }));\r\n  };\r\n  return (\r\n    <div className='configurator'>\r\n      <InputNumber min={20} max={45} value={x} onChange={(e) => setX(Number(e))} type='number' />\r\n      <InputNumber min={20} max={45} value={y} onChange={(e) => setY(Number(e))} type='number' />\r\n      <div className='players'></div>\r\n      {players.map((item, i) => (\r\n        <div className='players__item' key={i}>\r\n          <Input type='text' value={item} onChange={(e) => playersHandler(e.target.value, i)} />\r\n          <Button\r\n            type='primary'\r\n            danger\r\n            disabled={players.length <= 2}\r\n            onClick={(e) => setPlayers(players.filter((player, index) => index !== i))}>\r\n            X\r\n          </Button>\r\n        </div>\r\n      ))}\r\n      <Button\r\n        type='primary'\r\n        block\r\n        disabled={players.length >= 4}\r\n        onClick={(e) => setPlayers([...players, `player${players.length + 1}`])}>\r\n        add player\r\n      </Button>\r\n      <Button type='primary' block onClick={submit}>\r\n        submit config\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Configurator;\r\n","import React, { useRef, useState, useEffect } from 'react';\r\nimport './GameField.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { iState } from '../../store';\r\nimport { setTempFieldMatrix } from '../../store/game/actions';\r\nimport { iConfig, iPlayer, Dices, GameArray, PlayerColor } from '../../store/game/types';\r\n\r\nfunction GameField() {\r\n  const fieldMatrixRef = useRef<HTMLDivElement>(null);\r\n  const dispatch = useDispatch();\r\n  const fieldMatrix = useSelector((state: iState) => state.game.fieldMatrix);\r\n  const tempFieldMatrix = useSelector((state: iState) => state.game.tempFieldMatrix);\r\n  const cellSide = useSelector((state: iState) => state.game.cellSide);\r\n  const config = useSelector((state: iState) => state.game.config);\r\n  const currentPlayer = useSelector((state: iState) => state.game.currentPlayer);\r\n  const dice = useSelector((state: iState) => state.game.dice);\r\n  const currentFigureX = useSelector((state: iState) => state.game.currentFigureX);\r\n  const currentFigureY = useSelector((state: iState) => state.game.currentFigureY);\r\n  const [geometry, setGeometry] = useState<DOMRect | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (!fieldMatrixRef.current) return;\r\n    setGeometry(fieldMatrixRef.current.getBoundingClientRect());\r\n  }, [fieldMatrixRef]);\r\n  useEffect(() => {\r\n    if (!fieldMatrixRef.current || !geometry || !config || !tempFieldMatrix || !fieldMatrix || !dice || !currentPlayer)\r\n      return;\r\n    if (!isInsideGameField(geometry, currentFigureX, currentFigureY)) dispatch(setTempFieldMatrix(fieldMatrix));\r\n    else {\r\n      const mouseOverCellX = (currentFigureX - geometry.left) / cellSide;\r\n      const mouseOverCellY = (currentFigureY - geometry.top) / cellSide;\r\n      const rectangleCoordinates = setRectangleCells(mouseOverCellX, mouseOverCellY, dice);\r\n      //Если фигура залазит за край поля, выходим\r\n      if (isOverEdge(rectangleCoordinates, config)) return;\r\n      //Если первый ход и не в углу, выходим\r\n      const isFM = isFirstMove(currentPlayer?.count);\r\n      if (isFM && !isInCorner(rectangleCoordinates, config)) return;\r\n      if (!isInsertByRules(fieldMatrix, rectangleCoordinates, currentPlayer, isFM)) return;\r\n\r\n      const newFieldMatrix = fillFieldMatrix(fieldMatrix, rectangleCoordinates, currentPlayer);\r\n      if (!isFM) autofilling(newFieldMatrix, currentPlayer.color);\r\n      dispatch(setTempFieldMatrix(newFieldMatrix));\r\n    }\r\n  }, [\r\n    currentFigureX,\r\n    currentFigureY,\r\n    cellSide,\r\n    config,\r\n    dispatch /*currentPlayer, dice, fieldMatrix, geometry, tempFieldMatrix */,\r\n  ]);\r\n  return (\r\n    <div ref={fieldMatrixRef} className='game-field'>\r\n      {tempFieldMatrix &&\r\n        tempFieldMatrix.map((item, index) => (\r\n          <div key={index} className='game-field__row'>\r\n            {item.map((item, index) => (\r\n              <span key={index} style={{ backgroundColor: item || '' }} className='game-field__cell'></span>\r\n            ))}\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameField;\r\n\r\nconst isFirstMove = (count?: number) => count === 0;\r\n\r\nconst isInsideGameField = (geometry: DOMRect, currentFigureX: number, currentFigureY: number) => {\r\n  const insideX = geometry.left < currentFigureX && geometry.right > currentFigureX;\r\n  const insideY = geometry.top < currentFigureY && geometry.bottom > currentFigureY;\r\n  if (insideX && insideY) return true;\r\n  return false;\r\n};\r\n\r\nconst isInCorner = (rectCoord: iRectangleCells, { x, y }: iConfig) => {\r\n  if (\r\n    (rectCoord.xStart <= 0 && rectCoord.yStart <= 0) ||\r\n    (rectCoord.xEnd === x && rectCoord.yStart <= 0) ||\r\n    (rectCoord.xStart === 0 && rectCoord.yEnd === y) ||\r\n    (rectCoord.xEnd === x && rectCoord.yEnd === y)\r\n  )\r\n    return true;\r\n  return false;\r\n};\r\n\r\nconst isOverEdge = (rectCoord: iRectangleCells, { x, y }: iConfig) => {\r\n  if (rectCoord.xStart < 0 || rectCoord.xEnd > x || rectCoord.yStart < 0 || rectCoord.yEnd > y) return true;\r\n  return false;\r\n};\r\n\r\nconst setRectangleCells = (mouseOverCellX: number, mouseOverCellY: number, dice: Dices): iRectangleCells => ({\r\n  xStart: Math.round(mouseOverCellX - dice[1] / 2),\r\n  xEnd: Math.round(mouseOverCellX + dice[1] / 2),\r\n  yStart: Math.round(mouseOverCellY - dice[0] / 2),\r\n  yEnd: Math.round(mouseOverCellY + dice[0] / 2),\r\n});\r\n\r\nconst isInsertByRules = (field: GameArray, figure: iRectangleCells, player: iPlayer, isFirstMove: boolean) => {\r\n  if (isFirstMove) return true;\r\n  const siblingCells = field.reduce((acc, itemY, iY, arr) => {\r\n    if (figure.yStart - 1 === iY || iY === figure.yEnd)\r\n      acc.push(...itemY.filter((itemX, iX) => figure.xStart <= iX && iX < figure.xEnd));\r\n    if (figure.yStart <= iY && iY < figure.yEnd) {\r\n      acc.push(...itemY.filter((itemX, iX) => figure.xStart - 1 === iX || iX === figure.xEnd));\r\n    }\r\n    return acc;\r\n  }, []);\r\n  const cellsUnderFigure = field.reduce((acc, itemY, iY, arr) => {\r\n    if (figure.yStart <= iY && iY < figure.yEnd)\r\n      acc.push(...itemY.filter((itemX, iX) => figure.xStart <= iX && iX < figure.xEnd));\r\n    return acc;\r\n  }, []);\r\n  if (cellsUnderFigure.filter((item) => item).length > 0) return false;\r\n  if (siblingCells.filter((item) => item === player.color).length > 0) return true;\r\n  return false;\r\n};\r\n\r\nconst fillFieldMatrix = (fieldMatrix: GameArray, rectCoord: iRectangleCells, currentPlayer: iPlayer) => {\r\n  const newFieldMatrix = fieldMatrix.map((item, indexY) => {\r\n    if (rectCoord.yStart <= indexY && indexY < rectCoord.yEnd) {\r\n      return item.map((item, indexX) => {\r\n        if (rectCoord.xStart <= indexX && indexX < rectCoord.xEnd) return currentPlayer.color;\r\n        return item;\r\n      });\r\n    }\r\n    return item.slice();\r\n  });\r\n  return newFieldMatrix;\r\n};\r\n\r\ninterface iRectangleCells {\r\n  xStart: number;\r\n  yStart: number;\r\n  xEnd: number;\r\n  yEnd: number;\r\n}\r\n\r\nconst autofilling = (fieldMatrix: GameArray, color: PlayerColor) => {\r\n  const boolArr = fieldMatrix.map((itemY, iY) => {\r\n    return itemY.map((itemX, iX) => {\r\n      if (itemX === color) return true;\r\n      if (itemX === null) return null;\r\n      else return false;\r\n    });\r\n  });\r\n  if (boolArr.filter((item) => item.filter((item) => item === false).length).length) {\r\n    let a = fillTrue(boolArr);\r\n    a.forEach((item, iY) =>\r\n      item.forEach((item, iX) => {\r\n        if (item === true) fieldMatrix[iY][iX] = color;\r\n      })\r\n    );\r\n  }\r\n};\r\n\r\nconst fillTrue = (gameField: Array<Array<TCellContent>>): TCellContent[][] => {\r\n  gameField.forEach((itemY, iY) =>\r\n    itemY.forEach((itemX, iX) => {\r\n      if (gameField[iY][iX] === false) return;\r\n      else {\r\n        checkSiblings(gameField, { y: iY, x: iX });\r\n        gameField.forEach((item, iY) =>\r\n          item.forEach((item, iX) => {\r\n            if (item === '?') gameField[iY][iX] = true;\r\n          })\r\n        );\r\n      }\r\n    })\r\n  );\r\n  return gameField;\r\n};\r\n\r\nconst checkSiblings = (gameField: Array<Array<TCellContent>>, { x, y }: iPosition): boolean => {\r\n  if (gameField[y][x] === true || isInsideField(x, y, gameField)) return true;\r\n\r\n  const top = new Cell(x, y - 1);\r\n  const right = new Cell(x + 1, y);\r\n  const bottom = new Cell(x, y + 1);\r\n  const left = new Cell(x - 1, y);\r\n  const siblingCellsArr = [top, right, bottom, left];\r\n\r\n  if (siblingCellsArr.filter((item) => item.currentContent(gameField) === false).length > 0) {\r\n    siblingCellsArr.forEach((item) => {\r\n      if (item.currentContent(gameField) !== undefined && item.currentContent(gameField) !== true)\r\n        gameField[item.y][item.x] = false;\r\n    });\r\n    if (gameField[y][x] !== undefined && gameField[y][x] !== true) gameField[y][x] = false;\r\n    gameField.forEach((item, iY) =>\r\n      item.forEach((item, iX) => {\r\n        if (item === '?') gameField[iY][iX] = false;\r\n      })\r\n    );\r\n    return false;\r\n  } else {\r\n    gameField[y][x] = '?';\r\n    const arr = siblingCellsArr.filter((item) => {\r\n      if (\r\n        item.currentContent(gameField) === undefined ||\r\n        item.currentContent(gameField) === true ||\r\n        item.currentContent(gameField) === '?'\r\n      )\r\n        return true;\r\n      if (item.currentContent(gameField) === null) {\r\n        return checkSiblings(gameField, { x: item.x, y: item.y });\r\n      }\r\n      return false;\r\n    });\r\n    return arr.length >= 4;\r\n  }\r\n};\r\n\r\nconst isInsideField = (x: number, y: number, field: TCellContent[][]) => {\r\n  if (y < 0 || x < 0 || y >= field.length || x >= field[0].length) return true;\r\n  return false;\r\n};\r\n\r\ninterface iPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ntype TCellContent = boolean | '?' | null;\r\n\r\nclass Cell {\r\n  x: number;\r\n  y: number;\r\n  constructor(x: number, y: number) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n  currentContent = (gameField: TCellContent[][]) => {\r\n    return gameField[this.y]?.[this.x];\r\n  };\r\n}\r\n","import React, { useRef, useState, useCallback } from 'react';\r\nimport './ControlPanel.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  rollTheDice,\r\n  rotateFigure,\r\n  setFigurePosition,\r\n  setFieldMatrix,\r\n  setTempFieldMatrix,\r\n  setPlayer,\r\n} from '../../store/game/actions';\r\nimport { iState } from '../../store';\r\nimport { Button } from 'antd';\r\n\r\nfunction ControlPanel() {\r\n  const newFigureRef = useRef<HTMLDivElement>(null);\r\n  const dices = useSelector((state: iState) => state.game.dice);\r\n  const currentFigure = useSelector((state: iState) => state.game.currentFigure);\r\n  const currentPlayer = useSelector((state: iState) => state.game.currentPlayer);\r\n  const players = useSelector((state: iState) => state.game.players);\r\n  const tempFieldMatrix = useSelector((state: iState) => state.game.tempFieldMatrix);\r\n  const fieldMatrix = useSelector((state: iState) => state.game.fieldMatrix);\r\n  const [stepDone, setStepDone] = useState(false);\r\n  const [rollDiceDone, setRollDiceDone] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const mouseMoveHandler = useCallback(\r\n    (e: MouseEvent) => {\r\n      if (!newFigureRef.current) return;\r\n      newFigureRef.current.style.left = e.pageX - newFigureRef.current.offsetWidth / 2 + 'px';\r\n      newFigureRef.current.style.top = e.pageY - newFigureRef.current.offsetHeight / 2 + 'px';\r\n      dispatch(setFigurePosition(e.x, e.y));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const clickHandlerRoll = () => {\r\n    setRollDiceDone(true);\r\n    dispatch(rollTheDice(currentPlayer?.color));\r\n  };\r\n  const clickHandlerRotate = () => {\r\n    dispatch(rotateFigure(dices || [1, 1], currentPlayer?.color));\r\n  };\r\n  const onMouseDownHandler = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    if (!newFigureRef.current || stepDone) return;\r\n    newFigureRef.current.style.position = 'absolute';\r\n    newFigureRef.current.style.top = e.pageY - newFigureRef.current.offsetHeight / 2 + 'px';\r\n    newFigureRef.current.style.left = e.pageX - newFigureRef.current.offsetWidth / 2 + 'px';\r\n    document.addEventListener('mousemove', mouseMoveHandler);\r\n  };\r\n  const onMouseUpHandler = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    document.removeEventListener('mousemove', mouseMoveHandler);\r\n    if (!newFigureRef.current) return;\r\n    newFigureRef.current.style.position = 'static';\r\n    newFigureRef.current.style.top = 'auto';\r\n    newFigureRef.current.style.left = 'auto';\r\n    const isDifferent = tempFieldMatrix?.join() !== fieldMatrix?.join();\r\n    // if (tempFieldMatrix && currentPlayer && currentPlayer.count) autofill(tempFieldMatrix, currentPlayer.color);\r\n    if (tempFieldMatrix && isDifferent) {\r\n      setStepDone(true);\r\n    }\r\n  };\r\n  const undoHandler = () => {\r\n    if (fieldMatrix) {\r\n      setStepDone(false);\r\n      dispatch(setTempFieldMatrix(fieldMatrix));\r\n    }\r\n  };\r\n\r\n  const passHandler = () => {\r\n    if (!players || !currentPlayer || !fieldMatrix) return;\r\n    const playerIndex = players.findIndex((item) => item.name === currentPlayer.name);\r\n    const nextPlayerIndex = playerIndex + 1;\r\n    const nextPlayer = players[nextPlayerIndex] || players[0];\r\n    setStepDone(false);\r\n    setRollDiceDone(false);\r\n    dispatch(setPlayer(nextPlayer));\r\n    dispatch(setTempFieldMatrix(fieldMatrix));\r\n  };\r\n\r\n  const submitHandler = () => {\r\n    if (!players || !currentPlayer || !tempFieldMatrix) return;\r\n    const isDifferent = tempFieldMatrix?.join() !== fieldMatrix?.join();\r\n    if (tempFieldMatrix && isDifferent) {\r\n      dispatch(setFieldMatrix(tempFieldMatrix));\r\n    }\r\n    const playerIndex = players.findIndex((item) => item.name === currentPlayer.name);\r\n    const nextPlayerIndex = playerIndex + 1;\r\n    const nextPlayer = players[nextPlayerIndex] || players[0];\r\n    setStepDone(false);\r\n    setRollDiceDone(false);\r\n    currentPlayer.count = tempFieldMatrix.flat().filter((item) => item === currentPlayer.color).length;\r\n    dispatch(setPlayer(Object.assign({}, currentPlayer)));\r\n    dispatch(setPlayer(nextPlayer));\r\n  };\r\n  return (\r\n    <div className='curent-step'>\r\n      <div>{currentPlayer?.name}</div>\r\n      <div>{currentPlayer?.count}</div>\r\n      <Button disabled={rollDiceDone} type='primary' onClick={clickHandlerRoll}>\r\n        roll the dice\r\n      </Button>\r\n      <Button type='primary' disabled={!dices} onClick={clickHandlerRotate}>\r\n        rotate\r\n      </Button>\r\n      <Button onClick={passHandler}>pass</Button>\r\n      <div>{dices && dices[1]}</div>\r\n      <div>{dices && dices[0]}</div>\r\n      <div ref={newFigureRef} className='new-figure' onMouseDown={onMouseDownHandler} onMouseUp={onMouseUpHandler}>\r\n        {currentFigure &&\r\n          currentFigure.map((item, index) => (\r\n            <div key={index} className='new-figure__row'>\r\n              {item.map((item, index) => (\r\n                <span\r\n                  key={index}\r\n                  style={{ backgroundColor: stepDone ? 'grey' : item || '' }}\r\n                  className='new-figure__cell'></span>\r\n              ))}\r\n            </div>\r\n          ))}\r\n      </div>\r\n      {stepDone && (\r\n        <>\r\n          <Button onClick={undoHandler}>undo</Button>\r\n          <Button onClick={submitHandler}>submit</Button>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ControlPanel;\r\n","import React from 'react';\nimport './App.css';\nimport Configurator from '../Configurator';\nimport GameField from '../GameField';\nimport ControlPanel from '../ControlPanel';\nimport { useSelector } from 'react-redux';\nimport { iState } from '../../store';\n\nfunction App() {\n  const config = useSelector((state: iState) => state.game.config);\n  return (\n    <div className='app'>\n      {!config && <Configurator />}\n      {!!config && (\n        <>\n          <GameField />\n          <ControlPanel />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  GameState,\r\n  GameActionTypes,\r\n  ROLL_THE_DICE,\r\n  ROTATE_FIGURE,\r\n  SET_CONFIG,\r\n  SET_FIGURE_POSITION,\r\n  SET_FIELD_MATRIX,\r\n  SET_FINAL_FIGURE_POSITION,\r\n  SET_TEMP_FIELD_MATRIX,\r\n  SET_PLAYER,\r\n} from './types';\r\n\r\nconst initialState: GameState = {\r\n  config: null,\r\n  cellSide: 20,\r\n  fieldMatrix: null,\r\n  tempFieldMatrix: null,\r\n  dice: null,\r\n  currentFigure: null,\r\n  players: null,\r\n  currentPlayer: null,\r\n  currentFigureX: 0,\r\n  currentFigureY: 0,\r\n};\r\n\r\nexport function gameReducer(state = initialState, action: GameActionTypes) {\r\n  switch (action.type) {\r\n    case ROLL_THE_DICE:\r\n      return { ...state, ...action };\r\n    case ROTATE_FIGURE:\r\n      return { ...state, ...action };\r\n    case SET_CONFIG:\r\n      return { ...state, ...action };\r\n    case SET_FIGURE_POSITION:\r\n      return { ...state, ...action };\r\n    case SET_FIELD_MATRIX:\r\n      return { ...state, ...action };\r\n    case SET_TEMP_FIELD_MATRIX:\r\n      return { ...state, ...action };\r\n    case SET_FINAL_FIGURE_POSITION:\r\n      return { ...state, ...action };\r\n    case SET_PLAYER:\r\n      return { ...state, ...action };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore, combineReducers, applyMiddleware, Middleware, Dispatch, AnyAction } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport { gameReducer } from './game/reducers';\r\nimport { GameState } from './game/types';\r\n\r\nconst middlewares: Middleware<{}, any, Dispatch<AnyAction>>[] = [thunkMiddleware];\r\nif (process.env.NODE_ENV !== 'production') middlewares.push(logger);\r\n\r\nexport const store = createStore(\r\n  combineReducers({\r\n    game: gameReducer,\r\n  }),\r\n  applyMiddleware(...middlewares)\r\n);\r\n\r\nexport interface iState {\r\n  game: GameState;\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}