{"version":3,"sources":["Utils/index.ts","store/game/actions.ts","store/game/types.ts","components/Configurator/index.tsx","components/Header/index.tsx","components/ControlPanel/index.tsx","components/GameField/index.tsx","components/Game/index.tsx","components/Footer/index.tsx","components/App/index.tsx","serviceWorker.ts","store/game/reducers.ts","store/index.ts","index.tsx"],"names":["makeFieldMatrix","x","y","color","fieldMatrix","iX","firstLevelArray","iY","push","opacity","getRandomInt","max","Math","floor","random","setTempFieldMatrix","newFieldMatrix","dispatch","type","tempFieldMatrix","setPlayer","player","dice","currentFigure","currentPlayer","Configurator","useDispatch","initialValues","players","onFinish","config","map","item","index","name","count","length","className","title","direction","Item","layout","label","rules","required","message","min","List","fields","add","remove","style","minHeight","minWidth","field","key","noStyle","placeholder","width","MinusCircleOutlined","marginLeft","onClick","PlusOutlined","block","htmlType","labelCol","span","wrapperCol","Header","ControlPanel","newFigureRef","useRef","dices","useSelector","state","game","useState","stepDone","setStepDone","rollDiceDone","setRollDiceDone","mouseMoveHandler","useCallback","e","current","left","pageX","offsetWidth","top","pageY","offsetHeight","currentFigureX","currentFigureY","disabled","playerColor","firstDice","secondDice","rotateFigure","playerIndex","findIndex","nextPlayer","ref","onMouseDown","position","document","addEventListener","onMouseUp","removeEventListener","isDifferent","join","backgroundColor","zIndex","flat","filter","Object","assign","GameField","fieldMatrixRef","cellSide","geometry","setGeometry","useEffect","getBoundingClientRect","isInsideGameField","mouseOverCellX","mouseOverCellY","rectCoord","setRectangleCells","isFM","isFirstMove","isOverEdge","isInCorner","isInsertByRules","fillFieldMatrix","insideX","right","insideY","bottom","xStart","yStart","xEnd","yEnd","round","figure","siblingCells","reduce","acc","itemY","arr","itemX","indexY","indexX","slice","autofilling","boolArr","TCell","content","fillTrue","forEach","gameField","checkSiblings","isInsideField","siblingCellsArr","Cell","currentContent","undefined","this","Game","Footer","href","App","Boolean","window","location","hostname","match","initialState","middlewares","thunkMiddleware","store","createStore","combineReducers","action","applyMiddleware","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.6c023dae.chunk.js","sourcesContent":["import { Dice, PlayerColor, GameArray, TCell } from '../store/game/types';\r\n\r\nexport function makeFieldMatrix(x: number, y: number, color?: PlayerColor): GameArray {\r\n  const fieldMatrix: GameArray = [];\r\n  for (let iX = 0; iX < x; iX++) {\r\n    const firstLevelArray: Array<TCell | null> = [];\r\n    for (let iY = 0; iY < y; iY++) firstLevelArray.push(color ? { color, opacity: 1 } : null);\r\n    fieldMatrix.push(firstLevelArray);\r\n  }\r\n  return fieldMatrix;\r\n}\r\n\r\nexport function getRandomInt(max: number = 6): Dice {\r\n  return (Math.floor(Math.random() * max) + 1) as Dice;\r\n}\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  ROLL_THE_DICE,\r\n  GameActionTypes,\r\n  Dice,\r\n  ROTATE_FIGURE,\r\n  Dices,\r\n  iConfig,\r\n  SET_CONFIG,\r\n  iPlayer,\r\n  PlayerColor,\r\n  SET_FIGURE_POSITION,\r\n  SET_FIELD_MATRIX,\r\n  SET_FINAL_FIGURE_POSITION,\r\n  SET_TEMP_FIELD_MATRIX,\r\n  SET_PLAYER,\r\n  GameArray,\r\n} from './types';\r\nimport { getRandomInt, makeFieldMatrix } from '../../Utils';\r\n\r\nexport function rollTheDice(playerColor?: PlayerColor) {\r\n  return function (dispatch: Dispatch<GameActionTypes>) {\r\n    const firstDice: Dice = getRandomInt();\r\n    const secondDice: Dice = getRandomInt();\r\n    dispatch({\r\n      type: ROLL_THE_DICE,\r\n      dice: [firstDice, secondDice],\r\n      currentFigure: makeFieldMatrix(firstDice, secondDice, playerColor),\r\n    });\r\n  };\r\n}\r\n\r\nexport function rotateFigure(dices: Dices, playerColor?: PlayerColor) {\r\n  return function (dispatch: Dispatch<GameActionTypes>) {\r\n    const firstDice = dices[1];\r\n    const secondDice = dices[0];\r\n    dispatch({\r\n      type: ROTATE_FIGURE,\r\n      dice: [firstDice, secondDice],\r\n      currentFigure: makeFieldMatrix(firstDice, secondDice, playerColor),\r\n    });\r\n  };\r\n}\r\n\r\nexport function setConfig(config: iConfig) {\r\n  return function (dispatch: Dispatch<GameActionTypes>) {\r\n    const players: Array<iPlayer> = config.players.map(\r\n      (item, index) => ({ name: item, color: ['Red', 'Green', 'Yellow', 'Blue'][index], count: 0 } as iPlayer)\r\n    );\r\n    const currentPlayer = players[getRandomInt(players.length) - 1];\r\n    dispatch({\r\n      type: SET_CONFIG,\r\n      config: config,\r\n      fieldMatrix: makeFieldMatrix(config.x, config.y),\r\n      tempFieldMatrix: makeFieldMatrix(config.x, config.y),\r\n      players: players,\r\n      currentPlayer: currentPlayer,\r\n    });\r\n  };\r\n}\r\n\r\nexport function setFigurePosition(x: number, y: number) {\r\n  return function (dispatch: Dispatch<GameActionTypes>) {\r\n    dispatch({\r\n      type: SET_FIGURE_POSITION,\r\n      currentFigureX: x,\r\n      currentFigureY: y,\r\n    });\r\n  };\r\n}\r\n\r\nexport function setFieldMatrix(newFieldMatrix: GameArray) {\r\n  return function (dispatch: Dispatch<GameActionTypes>) {\r\n    dispatch({\r\n      type: SET_FIELD_MATRIX,\r\n      fieldMatrix: newFieldMatrix,\r\n    });\r\n  };\r\n}\r\n\r\nexport function setTempFieldMatrix(newFieldMatrix: GameArray) {\r\n  return function (dispatch: Dispatch<GameActionTypes>) {\r\n    dispatch({\r\n      type: SET_TEMP_FIELD_MATRIX,\r\n      tempFieldMatrix: newFieldMatrix,\r\n    });\r\n  };\r\n}\r\n\r\nexport function setFinalFigurePosition(newFieldMatrix: GameArray) {\r\n  return function (dispatch: Dispatch<GameActionTypes>) {\r\n    dispatch({\r\n      type: SET_FINAL_FIGURE_POSITION,\r\n      tempFieldMatrix: newFieldMatrix,\r\n    });\r\n  };\r\n}\r\n\r\nexport function setPlayer(player: iPlayer) {\r\n  return function (dispatch: Dispatch<GameActionTypes>) {\r\n    dispatch({\r\n      type: SET_PLAYER,\r\n      dice: null,\r\n      currentFigure: null,\r\n      currentPlayer: player,\r\n    });\r\n  };\r\n}\r\n","export const ROLL_THE_DICE = 'ROLL_THE_DICE';\r\nexport const ROTATE_FIGURE = 'ROTATE_FIGURE';\r\nexport const SET_CONFIG = 'SET_CONFIG';\r\nexport const SET_FIGURE_POSITION = 'SET_FIGURE_POSITION';\r\nexport const SET_FIELD_MATRIX = 'SET_FIELD_MATRIX';\r\nexport const SET_TEMP_FIELD_MATRIX = 'SET_TEMP_FIELD_MATRIX';\r\nexport const SET_FINAL_FIGURE_POSITION = 'SET_FINAL_FIGURE_POSITION';\r\nexport const SET_PLAYER = 'SET_PLAYER';\r\n\r\nexport interface GameState {\r\n  config: iConfig | null;\r\n  cellSide: number;\r\n  fieldMatrix: GameArray | null;\r\n  tempFieldMatrix: GameArray | null;\r\n  dice: Dices | null;\r\n  currentFigure: GameArray | null;\r\n  currentFigureX: number;\r\n  currentFigureY: number;\r\n  players: Array<iPlayer> | null;\r\n  currentPlayer: iPlayer | null;\r\n}\r\n\r\nexport interface iConfig {\r\n  x: number;\r\n  y: number;\r\n  players: Array<string>;\r\n}\r\nexport interface iPlayer {\r\n  name: string;\r\n  color: PlayerColor;\r\n  count: number;\r\n}\r\nexport type GameArray = Array<Array<TCell | null>>;\r\nexport interface TCell {\r\n  color: PlayerColor;\r\n  opacity: number;\r\n}\r\nexport type PlayerColor = 'Red' | 'Green' | 'Yellow' | 'Blue';\r\nexport type Dices = [Dice, Dice];\r\nexport type Dice = 1 | 2 | 3 | 4 | 5 | 6;\r\n\r\ninterface RollTheDice {\r\n  type: typeof ROLL_THE_DICE;\r\n  dice: Dices;\r\n  currentFigure: GameArray;\r\n}\r\n\r\ninterface RotateFigure {\r\n  type: typeof ROTATE_FIGURE;\r\n  dice: Dices;\r\n  currentFigure: GameArray;\r\n}\r\n\r\ninterface SetConfig {\r\n  type: typeof SET_CONFIG;\r\n  config: iConfig;\r\n  fieldMatrix: GameArray;\r\n  tempFieldMatrix: GameArray;\r\n  players: Array<iPlayer> | null;\r\n  currentPlayer: iPlayer;\r\n}\r\n\r\ninterface SetFigurePosition {\r\n  type: typeof SET_FIGURE_POSITION;\r\n  currentFigureX: number;\r\n  currentFigureY: number;\r\n}\r\n\r\ninterface SetFinalFigurePosition {\r\n  type: typeof SET_FINAL_FIGURE_POSITION;\r\n  tempFieldMatrix: GameArray | null;\r\n}\r\n\r\ninterface SetFieldMatrix {\r\n  type: typeof SET_FIELD_MATRIX;\r\n  fieldMatrix: GameArray | null;\r\n}\r\n\r\ninterface SetTempFieldMatrix {\r\n  type: typeof SET_TEMP_FIELD_MATRIX;\r\n  tempFieldMatrix: GameArray | null;\r\n}\r\n\r\ninterface SetPlayer {\r\n  type: typeof SET_PLAYER;\r\n  currentPlayer: iPlayer | null;\r\n}\r\n\r\nexport type GameActionTypes =\r\n  | RollTheDice\r\n  | RotateFigure\r\n  | SetConfig\r\n  | SetFigurePosition\r\n  | SetFieldMatrix\r\n  | SetFinalFigurePosition\r\n  | SetTempFieldMatrix\r\n  | SetPlayer;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setConfig } from '../../store/game/actions';\r\nimport { Form, Button, Input, InputNumber, Space, Card } from 'antd';\r\nimport { Store } from 'antd/lib/form/interface';\r\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport './Configurator.css';\r\n\r\nfunction Configurator() {\r\n  const dispatch = useDispatch();\r\n  const submit = ({ x, y, players }: Store) => dispatch(setConfig({ x, y, players }));\r\n  return (\r\n    <Form\r\n      initialValues={{ x: 20, y: 20, players: ['Player 1', 'Player 2'] }}\r\n      onFinish={submit}\r\n      className='configurator'>\r\n      <Card title={'Configurator'}>\r\n        <Space direction='vertical'>\r\n          <Form.Item\r\n            {...layout}\r\n            label='Cells horizontaly'\r\n            name='y'\r\n            rules={[{ required: true, message: 'Please, input Y cells' }]}>\r\n            <InputNumber min={20} max={45} />\r\n          </Form.Item>\r\n          <Form.Item\r\n            {...layout}\r\n            label='Cells verticaly'\r\n            name='x'\r\n            rules={[{ required: true, message: 'Please, input X cells' }]}>\r\n            <InputNumber min={20} max={45} />\r\n          </Form.Item>\r\n          <Form.List name='players'>\r\n            {(fields, { add, remove }) => {\r\n              return (\r\n                <div style={{ minHeight: 224, minWidth: 270 }}>\r\n                  {fields.map((field, index) => (\r\n                    <Form.Item label={`Player ${index + 1}`} required={true} key={field.key}>\r\n                      <Form.Item\r\n                        {...field}\r\n                        rules={[{ required: true, message: `Please input player's name.` }]}\r\n                        noStyle>\r\n                        <Input placeholder='player name' style={{ width: '90%' }} />\r\n                      </Form.Item>\r\n                      {fields.length > 2 ? (\r\n                        <MinusCircleOutlined style={{ marginLeft: 5 }} onClick={() => remove(field.name)} />\r\n                      ) : null}\r\n                    </Form.Item>\r\n                  ))}\r\n                  {fields.length < 4 ? (\r\n                    <Form.Item>\r\n                      <Button type='dashed' onClick={() => add()}>\r\n                        <PlusOutlined /> Add player\r\n                      </Button>\r\n                    </Form.Item>\r\n                  ) : null}\r\n                </div>\r\n              );\r\n            }}\r\n          </Form.List>\r\n\r\n          <Form.Item>\r\n            <Button type='primary' block htmlType='submit'>\r\n              Submit\r\n            </Button>\r\n          </Form.Item>\r\n        </Space>\r\n      </Card>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default Configurator;\r\n\r\nconst layout = {\r\n  labelCol: { span: 12 },\r\n  wrapperCol: { span: 12 },\r\n};\r\n","import React from 'react';\r\nimport './Header.css';\r\n\r\nfunction Header() {\r\n  return <div className='header'>GAME RANDOMFILL</div>;\r\n}\r\n\r\nexport default Header;\r\n","import React, { useRef, useState, useCallback } from 'react';\r\nimport './ControlPanel.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  rollTheDice,\r\n  rotateFigure,\r\n  setFigurePosition,\r\n  setFieldMatrix,\r\n  setTempFieldMatrix,\r\n  setPlayer,\r\n} from '../../store/game/actions';\r\nimport { iState } from '../../store';\r\nimport { Button } from 'antd';\r\n\r\nfunction ControlPanel() {\r\n  const newFigureRef = useRef<HTMLDivElement>(null);\r\n  const dices = useSelector((state: iState) => state.game.dice);\r\n  const currentFigure = useSelector((state: iState) => state.game.currentFigure);\r\n  const currentPlayer = useSelector((state: iState) => state.game.currentPlayer);\r\n  const players = useSelector((state: iState) => state.game.players);\r\n  const tempFieldMatrix = useSelector((state: iState) => state.game.tempFieldMatrix);\r\n  const fieldMatrix = useSelector((state: iState) => state.game.fieldMatrix);\r\n  const [stepDone, setStepDone] = useState(false);\r\n  const [rollDiceDone, setRollDiceDone] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const mouseMoveHandler = useCallback(\r\n    (e: MouseEvent) => {\r\n      if (!newFigureRef.current) return;\r\n      newFigureRef.current.style.left = e.pageX - newFigureRef.current.offsetWidth / 2 + 'px';\r\n      newFigureRef.current.style.top = e.pageY - newFigureRef.current.offsetHeight / 2 + 'px';\r\n      dispatch(setFigurePosition(e.x, e.y));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const clickHandlerRoll = () => {\r\n    if (!currentPlayer?.color) return;\r\n    setRollDiceDone(true);\r\n    dispatch(rollTheDice(currentPlayer?.color));\r\n  };\r\n  const clickHandlerRotate = () => {\r\n    if (!currentPlayer?.color) return;\r\n    dispatch(rotateFigure(dices || [1, 1], currentPlayer?.color));\r\n  };\r\n  const onMouseDownHandler = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    if (!newFigureRef.current || stepDone) return;\r\n    newFigureRef.current.style.position = 'absolute';\r\n    newFigureRef.current.style.top = e.pageY - newFigureRef.current.offsetHeight / 2 + 'px';\r\n    newFigureRef.current.style.left = e.pageX - newFigureRef.current.offsetWidth / 2 + 'px';\r\n    document.addEventListener('mousemove', mouseMoveHandler);\r\n  };\r\n  const onMouseUpHandler = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    document.removeEventListener('mousemove', mouseMoveHandler);\r\n    if (!newFigureRef.current) return;\r\n    newFigureRef.current.style.position = 'static';\r\n    newFigureRef.current.style.top = 'auto';\r\n    newFigureRef.current.style.left = 'auto';\r\n    const isDifferent = tempFieldMatrix?.join() !== fieldMatrix?.join();\r\n    // if (tempFieldMatrix && currentPlayer && currentPlayer.count) autofill(tempFieldMatrix, currentPlayer.color);\r\n    if (tempFieldMatrix && isDifferent) {\r\n      setStepDone(true);\r\n    }\r\n  };\r\n  const undoHandler = () => {\r\n    if (fieldMatrix) {\r\n      setStepDone(false);\r\n      dispatch(setTempFieldMatrix(fieldMatrix));\r\n    }\r\n  };\r\n\r\n  const passHandler = () => {\r\n    if (!players || !currentPlayer || !fieldMatrix) return;\r\n    const playerIndex = players.findIndex((item) => item.name === currentPlayer.name);\r\n    const nextPlayerIndex = playerIndex + 1;\r\n    const nextPlayer = players[nextPlayerIndex] || players[0];\r\n    setStepDone(false);\r\n    setRollDiceDone(false);\r\n    dispatch(setPlayer(nextPlayer));\r\n    dispatch(setTempFieldMatrix(fieldMatrix));\r\n  };\r\n\r\n  const submitHandler = () => {\r\n    if (!players || !currentPlayer || !tempFieldMatrix) return;\r\n    const isDifferent = tempFieldMatrix?.join() !== fieldMatrix?.join();\r\n    if (tempFieldMatrix && isDifferent) {\r\n      dispatch(\r\n        setFieldMatrix(\r\n          tempFieldMatrix.map((item) =>\r\n            item.map((item) => {\r\n              if (item) item.opacity = 1;\r\n              return item;\r\n            })\r\n          )\r\n        )\r\n      );\r\n    }\r\n    const playerIndex = players.findIndex((item) => item.name === currentPlayer.name);\r\n    const nextPlayerIndex = playerIndex + 1;\r\n    const nextPlayer = players[nextPlayerIndex] || players[0];\r\n    setStepDone(false);\r\n    setRollDiceDone(false);\r\n    currentPlayer.count = tempFieldMatrix.flat().filter((item) => item?.color === currentPlayer.color).length;\r\n    dispatch(setPlayer(Object.assign({}, currentPlayer)));\r\n    dispatch(setPlayer(nextPlayer));\r\n  };\r\n  return (\r\n    <div className='curent-step'>\r\n      <div>{currentPlayer?.name}</div>\r\n      <div>{currentPlayer?.count}</div>\r\n      <Button disabled={rollDiceDone} type='primary' onClick={clickHandlerRoll}>\r\n        roll the dice\r\n      </Button>\r\n      <Button type='primary' disabled={!dices} onClick={clickHandlerRotate}>\r\n        rotate\r\n      </Button>\r\n      <Button onClick={passHandler}>pass</Button>\r\n      <div>{dices && dices[1]}</div>\r\n      <div>{dices && dices[0]}</div>\r\n      <div ref={newFigureRef} className='new-figure' onMouseDown={onMouseDownHandler} onMouseUp={onMouseUpHandler}>\r\n        {currentFigure &&\r\n          currentFigure.map((item, index) => (\r\n            <div key={index} className='new-figure__row'>\r\n              {item.map((item, index) => (\r\n                <span\r\n                  key={index}\r\n                  style={{ backgroundColor: stepDone ? 'grey' : item?.color || '', zIndex: 100 }}\r\n                  className='new-figure__cell'></span>\r\n              ))}\r\n            </div>\r\n          ))}\r\n      </div>\r\n      {stepDone && (\r\n        <>\r\n          <Button onClick={undoHandler}>undo</Button>\r\n          <Button onClick={submitHandler}>submit</Button>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ControlPanel;\r\n","import React, { useRef, useState, useEffect } from 'react';\r\nimport './GameField.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { iState } from '../../store';\r\nimport { setTempFieldMatrix } from '../../store/game/actions';\r\nimport { iConfig, iPlayer, Dices, GameArray, PlayerColor } from '../../store/game/types';\r\n\r\nfunction GameField() {\r\n  const fieldMatrixRef = useRef<HTMLDivElement>(null);\r\n  const dispatch = useDispatch();\r\n  const fieldMatrix = useSelector((state: iState) => state.game.fieldMatrix);\r\n  const tempFieldMatrix = useSelector((state: iState) => state.game.tempFieldMatrix);\r\n  const cellSide = useSelector((state: iState) => state.game.cellSide);\r\n  const config = useSelector((state: iState) => state.game.config);\r\n  const currentPlayer = useSelector((state: iState) => state.game.currentPlayer);\r\n  const dice = useSelector((state: iState) => state.game.dice);\r\n  const currentFigureX = useSelector((state: iState) => state.game.currentFigureX);\r\n  const currentFigureY = useSelector((state: iState) => state.game.currentFigureY);\r\n  const [geometry, setGeometry] = useState<DOMRect | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (!fieldMatrixRef.current) return;\r\n    setGeometry(fieldMatrixRef.current.getBoundingClientRect());\r\n  }, [fieldMatrixRef]);\r\n  useEffect(() => {\r\n    if (!fieldMatrixRef.current || !geometry || !config || !tempFieldMatrix || !fieldMatrix || !dice || !currentPlayer)\r\n      return;\r\n    if (!isInsideGameField(geometry, currentFigureX, currentFigureY)) dispatch(setTempFieldMatrix(fieldMatrix));\r\n    else {\r\n      const mouseOverCellX = (currentFigureX - geometry.left) / cellSide;\r\n      const mouseOverCellY = (currentFigureY - geometry.top) / cellSide;\r\n      const rectCoord = setRectangleCells(mouseOverCellX, mouseOverCellY, dice);\r\n      const isFM = isFirstMove(currentPlayer?.count);\r\n      //Если фигура залазит за край поля, выходим\r\n      if (isOverEdge(rectCoord, config)) dispatch(setTempFieldMatrix(fieldMatrix));\r\n      //Если первый ход и не в углу, выходим\r\n      else if (isFM && !isInCorner(rectCoord, config)) dispatch(setTempFieldMatrix(fieldMatrix));\r\n      //Проверка по правилам ли вставка\r\n      else if (!isInsertByRules(fieldMatrix, rectCoord, currentPlayer, isFM)) dispatch(setTempFieldMatrix(fieldMatrix));\r\n      else {\r\n        const newFieldMatrix = fillFieldMatrix(fieldMatrix, rectCoord, currentPlayer.color, isFM);\r\n        dispatch(setTempFieldMatrix(newFieldMatrix));\r\n      }\r\n    }\r\n  }, [\r\n    currentFigureX,\r\n    currentFigureY,\r\n    cellSide,\r\n    config,\r\n    dispatch /*currentPlayer, dice, fieldMatrix, geometry, tempFieldMatrix */,\r\n  ]);\r\n  return (\r\n    <div ref={fieldMatrixRef} className='game-field'>\r\n      {tempFieldMatrix &&\r\n        tempFieldMatrix.map((item, index) => (\r\n          <div key={index} className='game-field__row'>\r\n            {item.map((item, index) => (\r\n              <span\r\n                key={index}\r\n                style={{ backgroundColor: item?.color || '', opacity: item?.opacity }}\r\n                className='game-field__cell'></span>\r\n            ))}\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameField;\r\n\r\nconst isFirstMove = (count?: number) => count === 0;\r\n\r\nconst isInsideGameField = (geometry: DOMRect, currentFigureX: number, currentFigureY: number) => {\r\n  const insideX = geometry.left < currentFigureX && geometry.right > currentFigureX;\r\n  const insideY = geometry.top < currentFigureY && geometry.bottom > currentFigureY;\r\n  if (insideX && insideY) return true;\r\n  return false;\r\n};\r\n\r\nconst isInCorner = (rectCoord: iRectangleCells, { x, y }: iConfig) => {\r\n  if (\r\n    (rectCoord.xStart <= 0 && rectCoord.yStart <= 0) ||\r\n    (rectCoord.xEnd === x && rectCoord.yStart <= 0) ||\r\n    (rectCoord.xStart === 0 && rectCoord.yEnd === y) ||\r\n    (rectCoord.xEnd === x && rectCoord.yEnd === y)\r\n  )\r\n    return true;\r\n  return false;\r\n};\r\n\r\nconst isOverEdge = (rectCoord: iRectangleCells, { x, y }: iConfig) => {\r\n  if (rectCoord.xStart < 0 || rectCoord.xEnd > x || rectCoord.yStart < 0 || rectCoord.yEnd > y) return true;\r\n  return false;\r\n};\r\n\r\nconst setRectangleCells = (mouseOverCellX: number, mouseOverCellY: number, dice: Dices): iRectangleCells => ({\r\n  xStart: Math.round(mouseOverCellX - dice[1] / 2),\r\n  xEnd: Math.round(mouseOverCellX + dice[1] / 2),\r\n  yStart: Math.round(mouseOverCellY - dice[0] / 2),\r\n  yEnd: Math.round(mouseOverCellY + dice[0] / 2),\r\n});\r\n\r\nconst isInsertByRules = (field: GameArray, figure: iRectangleCells, player: iPlayer, isFirstMove: boolean) => {\r\n  if (isFirstMove) return true;\r\n  const siblingCells = field.reduce((acc, itemY, iY, arr) => {\r\n    if (figure.yStart - 1 === iY || iY === figure.yEnd)\r\n      acc.push(...itemY.filter((itemX, iX) => figure.xStart <= iX && iX < figure.xEnd));\r\n    if (figure.yStart <= iY && iY < figure.yEnd) {\r\n      acc.push(...itemY.filter((itemX, iX) => figure.xStart - 1 === iX || iX === figure.xEnd));\r\n    }\r\n    return acc;\r\n  }, []);\r\n  const cellsUnderFigure = field.reduce((acc, itemY, iY, arr) => {\r\n    if (figure.yStart <= iY && iY < figure.yEnd)\r\n      acc.push(...itemY.filter((itemX, iX) => figure.xStart <= iX && iX < figure.xEnd));\r\n    return acc;\r\n  }, []);\r\n  if (cellsUnderFigure.filter((item) => item).length > 0) return false;\r\n  if (siblingCells.filter((item) => item?.color === player.color).length > 0) return true;\r\n  return false;\r\n};\r\n\r\nconst fillFieldMatrix = (fieldMatrix: GameArray, rectCoord: iRectangleCells, color: PlayerColor, isFM: boolean) => {\r\n  const newFieldMatrix = fieldMatrix.map((item, indexY) => {\r\n    if (rectCoord.yStart <= indexY && indexY < rectCoord.yEnd) {\r\n      return item.map((item, indexX) => {\r\n        if (rectCoord.xStart <= indexX && indexX < rectCoord.xEnd) return { color: color, opacity: 0.5 };\r\n        return item ? Object.assign({}, item) : null;\r\n      });\r\n    }\r\n    return item.slice();\r\n  });\r\n  if (!isFM) autofilling(newFieldMatrix, color);\r\n  return newFieldMatrix;\r\n};\r\n\r\ninterface iRectangleCells {\r\n  xStart: number;\r\n  yStart: number;\r\n  xEnd: number;\r\n  yEnd: number;\r\n}\r\n\r\nconst autofilling = (fieldMatrix: GameArray, color: PlayerColor) => {\r\n  const boolArr = fieldMatrix.map((itemY, iY) => {\r\n    return itemY.map((itemX, iX) => {\r\n      if (itemX?.color === color) return new TCell(true, itemX.opacity);\r\n      if (itemX === null) return new TCell(null, 1);\r\n      else return new TCell(false, itemX.opacity);\r\n    });\r\n  });\r\n  if (boolArr.filter((item) => item.filter((item) => item.content === false).length).length) {\r\n    let a = fillTrue(boolArr);\r\n    a.forEach((item, iY) =>\r\n      item.forEach((item, iX) => {\r\n        if (item.content === true) fieldMatrix[iY][iX] = { color, opacity: item.opacity };\r\n      })\r\n    );\r\n  }\r\n};\r\n\r\nconst fillTrue = (gameField: Array<Array<TCell>>): TCell[][] => {\r\n  gameField.forEach((itemY, iY) =>\r\n    itemY.forEach((itemX, iX) => {\r\n      if (gameField[iY][iX].content === false) return;\r\n      else {\r\n        checkSiblings(gameField, { y: iY, x: iX });\r\n        gameField.forEach((item, iY) =>\r\n          item.forEach((item, iX) => {\r\n            if (item.content === '?') {\r\n              gameField[iY][iX].content = true;\r\n              gameField[iY][iX].opacity = 0.5;\r\n            }\r\n          })\r\n        );\r\n      }\r\n    })\r\n  );\r\n  return gameField;\r\n};\r\n\r\nconst checkSiblings = (gameField: Array<Array<TCell>>, { x, y }: iPosition): boolean => {\r\n  if (gameField[y][x].content === true || isInsideField(x, y, gameField)) return true;\r\n\r\n  const top = new Cell(x, y - 1);\r\n  const right = new Cell(x + 1, y);\r\n  const bottom = new Cell(x, y + 1);\r\n  const left = new Cell(x - 1, y);\r\n  const siblingCellsArr = [top, right, bottom, left];\r\n\r\n  if (siblingCellsArr.filter((item) => item.currentContent(gameField)?.content === false).length > 0) {\r\n    siblingCellsArr.forEach((item) => {\r\n      if (item.currentContent(gameField) !== undefined && item.currentContent(gameField).content !== true)\r\n        gameField[item.y][item.x].content = false;\r\n    });\r\n    if (gameField[y][x] !== undefined && gameField[y][x].content !== true) gameField[y][x].content = false;\r\n    gameField.forEach((item, iY) =>\r\n      item.forEach((item, iX) => {\r\n        if (item.content === '?') gameField[iY][iX].content = false;\r\n      })\r\n    );\r\n    return false;\r\n  } else {\r\n    gameField[y][x].content = '?';\r\n    const arr = siblingCellsArr.filter((item) => {\r\n      if (\r\n        item.currentContent(gameField) === undefined ||\r\n        item.currentContent(gameField).content === true ||\r\n        item.currentContent(gameField).content === '?'\r\n      )\r\n        return true;\r\n      if (item.currentContent(gameField).content === null) {\r\n        return checkSiblings(gameField, { x: item.x, y: item.y });\r\n      }\r\n      return false;\r\n    });\r\n    return arr.length >= 4;\r\n  }\r\n};\r\n\r\nconst isInsideField = (x: number, y: number, field: TCell[][]) => {\r\n  if (y < 0 || x < 0 || y >= field.length || x >= field[0].length) return true;\r\n  return false;\r\n};\r\n\r\ninterface iPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nclass TCell {\r\n  content: boolean | '?' | null;\r\n  opacity: number;\r\n  constructor(content: boolean | '?' | null, opacity: number) {\r\n    this.content = content;\r\n    this.opacity = opacity;\r\n  }\r\n}\r\n\r\nclass Cell {\r\n  x: number;\r\n  y: number;\r\n  constructor(x: number, y: number) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n  currentContent = (gameField: TCell[][]) => {\r\n    return gameField[this.y]?.[this.x];\r\n  };\r\n}\r\n","import React from 'react';\r\nimport ControlPanel from '../ControlPanel';\r\nimport GameField from '../GameField';\r\n\r\nimport './Game.css';\r\n\r\nfunction Game() {\r\n  return (\r\n    <div className='game'>\r\n      <ControlPanel />\r\n      <GameField />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\r\nimport './Footer.css';\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className='footer'>\r\n      developer <a href='https://github.com/shersh1k'>shersh1k</a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { iState } from '../../store';\nimport Configurator from '../Configurator';\nimport Header from '../Header';\nimport Game from '../Game';\nimport Footer from '../Footer';\nimport './App.css';\n\nfunction App() {\n  const config = useSelector((state: iState) => state.game.config);\n  return (\n    <div className='app'>\n      <Header />\n      {!config ? <Configurator /> : <Game />}\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  GameState,\r\n  GameActionTypes,\r\n  ROLL_THE_DICE,\r\n  ROTATE_FIGURE,\r\n  SET_CONFIG,\r\n  SET_FIGURE_POSITION,\r\n  SET_FIELD_MATRIX,\r\n  SET_FINAL_FIGURE_POSITION,\r\n  SET_TEMP_FIELD_MATRIX,\r\n  SET_PLAYER,\r\n} from './types';\r\n\r\nconst initialState: GameState = {\r\n  config: null,\r\n  cellSide: 20,\r\n  fieldMatrix: null,\r\n  tempFieldMatrix: null,\r\n  dice: null,\r\n  currentFigure: null,\r\n  players: null,\r\n  currentPlayer: null,\r\n  currentFigureX: 0,\r\n  currentFigureY: 0,\r\n};\r\n\r\nexport function gameReducer(state = initialState, action: GameActionTypes) {\r\n  switch (action.type) {\r\n    case ROLL_THE_DICE:\r\n      return { ...state, ...action };\r\n    case ROTATE_FIGURE:\r\n      return { ...state, ...action };\r\n    case SET_CONFIG:\r\n      return { ...state, ...action };\r\n    case SET_FIGURE_POSITION:\r\n      return { ...state, ...action };\r\n    case SET_FIELD_MATRIX:\r\n      return { ...state, ...action };\r\n    case SET_TEMP_FIELD_MATRIX:\r\n      return { ...state, ...action };\r\n    case SET_FINAL_FIGURE_POSITION:\r\n      return { ...state, ...action };\r\n    case SET_PLAYER:\r\n      return { ...state, ...action };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore, combineReducers, applyMiddleware, Middleware, Dispatch, AnyAction } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport { gameReducer } from './game/reducers';\r\nimport { GameState } from './game/types';\r\n\r\nconst middlewares: Middleware<{}, any, Dispatch<AnyAction>>[] = [thunkMiddleware];\r\nif (process.env.NODE_ENV !== 'production') middlewares.push(logger);\r\n\r\nexport const store = createStore(\r\n  combineReducers({\r\n    game: gameReducer,\r\n  }),\r\n  applyMiddleware(...middlewares)\r\n);\r\n\r\nexport interface iState {\r\n  game: GameState;\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}